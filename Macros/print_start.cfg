[gcode_macro PRINT_START]
description: Machine heatup procedure before starting a print
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0

gcode:
    # Extruder and bed temperatures
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Heatsoak time of the bed in minutes and chamber temperature wanted
    {% set SOAK = params.SOAK|default(0)|int %}
    {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
    {% set CHAMBER_MAXTIME = params.CHAMBER_MAXTIME|default(15)|int %}
    # Default material type to 'XXX'
    {% set MATERIAL = params.MATERIAL|default("XXX")|string %}
    # Get bounding box of the first layer
    {% set FL_SIZE = params.SIZE|default("10_10_10_10")|string %}

    # Set vars
    _User_Variables
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60 %}

	# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={BED_TEMP}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={EXTRUDER_TEMP}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={CHAMBER_TEMP}	


    CLEAR_PAUSE
    RESETSPEEDS
    BED_MESH_CLEAR
    G90
    M83
    LIGHT_ON S=50
    SET_NOZZLE_LEDS_BY_NAME COLOR="WHITE"                                                ; turn on nozzle LEDs
    SET_LOGO_LEDS_BY_NAME COLOR="WHITE"                                                  ; set logo LEDs back to white


    # 1 ----- HOMING ------------------------------------------
    # Home if not already homed
    CG28


    # 2 ----- BED HEATSOAK -------------------------------------
    {% if printer["temperature_sensor chamber"].temperature < CHAMBER_TEMP %}                      ; - if chamber is not at temp yet:
        HEATSOAK T={BED_TEMP} MOVE=1 H_TEMP={hotendtemp}                                      ;   heatsoak macro + park in center
        M190 S{BED_TEMP}                                                                      ;   wait for bed final temp
        TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={CHAMBER_TEMP}                ;   wait for chamber final temp
    {% else %}                                                                                ; - if chamber is already at temp:
        {% if printer.heater_bed.temperature < (BED_TEMP-2) %}                                ; -- but bed is not fully heated (within 2C):
            HEATSOAK T={BED_TEMP} MOVE=1 H_TEMP={hotendtemp}                                  ;       heatsoak and park
            M190 S{BED_TEMP}                                                                  ;       wait for bed final temp
        {% else %}                                                                            ; -- and bed is already heated:
            HEATSOAK T={BED_TEMP} MOVE=0 H_TEMP={hotendtemp}                                  ;      "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
    {% endif %} 
    M106 S0                                                                                   ; turn off part cooling fan (from heatsoak)


    # 4 ----- QUAD GANTRY LEVELING -----------------------------
    {% if printer.quad_gantry_level.applied|lower == 'false' %}
        {% if V %}
            RESPOND MSG="QGL..."
        {% endif %}
        ATTACH_PROBE_LOCK
        QUAD_GANTRY_LEVEL
    {% endif %}

    # 8 ----- BED MESH -------------------------------------------
    {% if V %}
        RESPOND MSG="Bed mesh measurement..."
    {% endif %}
    COMPUTE_MESH_PARAMETERS SIZE={FL_SIZE}
    ADAPTIVE_BED_MESH
    DOCK_PROBE_UNLOCK

    # 5 ----- EXTRUDER HEATING ---------------------------------
    # Heat the nozzle to print temperature ontop of the purge bucket
    PARKBUCKET
    STATUS_HEATING
    M109 S{EXTRUDER_TEMP}
    {% if V %}
        RESPOND MSG="Extruder temperature READY"
    {% endif %}


    # 6 ----- AUTO Z CALIBRATION --------------------------------
    {% if V %}
        RESPOND MSG="Nozzle cleaning..."
    {% endif %}
    CLEAN_NOZZLE
    {% if V %}
        #RESPOND MSG="Auto Z calibration..."
    {% endif %}
    G28 Z
   # CALIBRATE_Z


    # 9 ----- PRINT !!! -------------------------------------------
    # Enable filament sensor, do a prime line, lower the lighs and start the print
    {% if V %}
        RESPOND MSG="filament sensor enabled"
    {% endif %}
    #CLEAN_NOZZLE
    {% if V %}
        RESPOND MSG="Start printing !"
    {% endif %}
    PRIME_LINE
    LIGHT_ON S=10
    STATUS_PRINTING
    G92 E0.0
    SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                                  ; enable filament sensor


[gcode_macro PRIME_LINE]
gcode:
    # Set vars
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    G91
    M83
    G1 Z5 F{Sz}

    ; Starting position
    G90
    G1 X2.5 Y20 F{St}
    G1 Z0.3 F{Sz|int / 2}

    ; Add pressure in the nozzle
    G92 E0
    G1 E8 F300

    ; Prime line
    G92 E0
    G1 Y100 E10 F2500
    G92 E0
    G1 Y150 E5 F1500

    ; Retract and Z-hop
    G92 E0
    G1 Z2.0 E-0.1 F{Sz}
    G92 E0
    G1 Z5 F{Sz}

[gcode_macro RESETSPEEDS]
gcode:
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 
